{"version":3,"sources":["../src/query.ts","../src/client.ts","../src/batch.ts"],"sourcesContent":["export type EsormQueryOperator = \"=\" | \"in\" | \"<\" | \"<=\" | \">\" | \">=\" | \"!=\";\nexport type EsormQueryCondition = {\n  operator: EsormQueryOperator;\n  column: string;\n  value: any;\n};\nexport type EsormQuery =\n  | undefined\n  | EsormQueryCondition\n  | {\n      operator: \"and\";\n      conditions: EsormQuery[];\n    }\n  | {\n      operator: \"or\";\n      conditions: EsormQuery[];\n    };\n\nexport type EsormQueryOptions = {\n  type: string;\n  query?: EsormQuery;\n  sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n  limit?: number;\n  offset?: number;\n};\n\nexport const EsormQueryBuilder = {\n  where: (column: string, operator: EsormQueryOperator, value: any) => {\n    const condition: EsormQueryCondition = {\n      operator,\n      column,\n      value,\n    };\n\n    return condition;\n  },\n  and: (...conditions: EsormQuery[]) => ({ operator: \"and\" as const, conditions }),\n  or: (...conditions: EsormQuery[]) => ({ operator: \"or\" as const, conditions }),\n};\n","import { z } from \"zod\";\nimport { EsormSchemaDefinition } from \"./v2\";\nimport { EsormQuery, EsormQueryBuilder } from \"./query\";\nimport { makeAutoObservable, reaction, runInAction, untracked } from \"mobx\";\nimport { createEffect, createMemo, onCleanup, untrack } from \"solid-js\";\nimport { createStore } from \"solid-js/store\";\nimport { checkDoesBatchOperationRecordHaveChanges, createBatchOperationRecord } from \"./batch\";\n\nexport const EsormClient = <R extends { _SCHEMATYPE: EsormSchemaDefinition }>() => {\n  type SchemaType = R[\"_SCHEMATYPE\"];\n  type BaseType = { _id: string };\n  type EntityType<K extends keyof SchemaType> = BaseType &\n    Partial<{ [P in keyof SchemaType[K][\"properties\"]]: z.infer<SchemaType[K][\"properties\"][P][\"schema\"]> }>;\n  type FinalType = { [Key in keyof SchemaType]: EntityType<Key> };\n\n  createSocket({\n    url: \"/ws\",\n    onConnect: (ws) => {\n      ws.addEventListener(\"open\", () => {\n        ws.send(JSON.stringify({ action: \"subscribe\", data: \"Hello World\" }));\n\n        ws.addEventListener(\"message\", (e) => {\n          const json = JSON.parse(e.data);\n\n          console.log(\"WS: Message\", json);\n        });\n      });\n    },\n  });\n\n  const req = async (body: any) => {\n    const response = await fetch(\"/api/entity\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n\n    if (response.ok) {\n      const json = await response.json();\n\n      return (json as any).data as unknown;\n    }\n  };\n\n  const cache = makeAutoObservable({\n    entities: new Map<string, any>(),\n    queries: {} as Record<string, any>,\n\n    updateEntities: <K extends keyof FinalType & string>(type: K, entities: EntityType<K>[]) => {\n      entities.forEach((entity) => {\n        const key = `${type}|${entity._id}`;\n\n        cache.entities.set(key, entity);\n      });\n    },\n  });\n\n  const manager = {\n    operationsCommitting: createBatchOperationRecord(), // Operations that are local that are being committed\n    operationsLocal: createBatchOperationRecord(), // Operations that are local that are not yet being committed\n  };\n\n  const update = async () => {\n    if (checkDoesBatchOperationRecordHaveChanges(manager.operationsLocal)) {\n      console.log(\"Pushing Updates...\", manager.operationsLocal);\n\n      manager.operationsCommitting = manager.operationsLocal;\n      manager.operationsLocal = createBatchOperationRecord();\n\n      await req({\n        action: \"apply-operation\",\n        operations: manager.operationsCommitting,\n      });\n    }\n\n    setTimeout(update, 1000);\n  };\n\n  update();\n\n  const getOrCreateQuery = <Key extends keyof FinalType & string>(options: {\n    type: Key;\n    query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n    sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n    limit?: number;\n    offset?: number;\n  }) => {\n    const query = options.query(EsormQueryBuilder);\n    const key = deterministicStringify({\n      ...options,\n      query,\n    });\n\n    const create = () => {\n      console.log(\"Creating Query\", key);\n\n      const state = makeAutoObservable({\n        key,\n\n        count: 1,\n\n        isLoading: true,\n        isError: false,\n\n        get data() {\n          const r: EntityType<Key>[] = [...cache.entities]\n            .filter(([key, value]) => {\n              if (!key.startsWith(options.type)) return false;\n\n              return query ? checkEntityPassesQuery(query, value) : true;\n            })\n            .map(([key, value]) => value);\n\n          return r;\n        },\n\n        start: async () => {\n          runInAction(() => {\n            state.isLoading = true;\n            state.isError = false;\n          });\n\n          const result = await client.getMany(options);\n\n          state.success(result);\n\n          cache.updateEntities(options.type, result);\n        },\n        success: (data: EntityType<Key>[]) => {\n          console.log(\"QUERY SUCCESS\");\n\n          state.isLoading = false;\n          state.isError = false;\n        },\n        error: () => {\n          state.isLoading = false;\n          state.isError = true;\n        },\n        dispose: () => {\n          console.log(\"DISPOSING QUERY (?)\");\n\n          cache.queries[key].count--;\n\n          if (cache.queries[key].count === 0) {\n            console.log(\"EMPTY QUERY. REMOVING...\");\n\n            delete cache.queries[key];\n          }\n        },\n      });\n\n      untracked(() => state.start());\n\n      return state;\n    };\n\n    runInAction(() => {\n      if (cache.queries[key] === undefined) {\n        cache.queries[key] = create();\n      } else {\n        cache.queries[key].count++;\n      }\n    });\n\n    return cache.queries[key] as ReturnType<typeof create>;\n  };\n\n  const client = {\n    createOne: async <Key extends keyof SchemaType>(type: Key, data: EntityType<Key>) => {\n      const response = await fetch(\"/api/entity\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          action: \"create-one\",\n          type,\n          data,\n        }),\n      });\n\n      if (response.ok) {\n        const json = await response.json();\n\n        return (json as any).data as FinalType[Key][];\n      }\n    },\n    getMany: async <Key extends keyof FinalType>(options: {\n      type: Key;\n      query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n      sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n    }) => {\n      // TODO: This method should basically create a query, read the data, and then unsubscribe from the query right away.\n      // This way, this function uses the exact same logic as other queries, but does not hold onto the subscription longer than necessary.\n      // The user should be warned that using esorm this way is not recommended.\n\n      const response = await fetch(\"/api/entity\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          action: \"get-many\",\n          type: options.type,\n          query: options.query?.(EsormQueryBuilder),\n          sort: options.sort,\n        }),\n      });\n\n      if (response.ok) {\n        const json = await response.json();\n\n        return (json as any).data as FinalType[Key][];\n      } else {\n        throw new Error(response.statusText);\n      }\n    },\n\n    /** For use with SolidJS */\n    createQuery: <Key extends keyof FinalType & string>(\n      getOptions: () => {\n        type: Key;\n        query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n        sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n        limit?: number;\n        offset?: number;\n      },\n    ) => {\n      const state = makeAutoObservable({\n        get query() {\n          console.log(\"GETTING\");\n\n          const options = getOptions();\n\n          return getOrCreateQuery(options);\n        },\n      });\n\n      createEffect(() => {\n        const query = state.query;\n\n        onCleanup(() => query.dispose());\n      });\n\n      return state;\n    },\n\n    createEntityValue: <Key extends keyof SchemaType & string>(type: Key, value: EntityType<Key>) => {\n      cache.updateEntities(type, [value]);\n\n      s(manager.operationsLocal.types, type, (x) => x ?? {});\n      s(manager.operationsLocal.types[type], value._id, () => ({ action: \"create\", data: value }));\n    },\n    setEntityValue: <Key extends keyof SchemaType & string, K extends keyof EntityType<Key> & string>(\n      type: Key,\n      target: EntityType<Key>,\n      key: K,\n      value: EntityType<Key>[K] | undefined,\n    ) => {\n      runInAction(() => {\n        target[key] = value;\n      });\n\n      s(manager.operationsLocal.types, type, (x) => x ?? {});\n      s(manager.operationsLocal.types[type], target._id, (x) => x ?? { action: \"update\", data: {} });\n      s(manager.operationsLocal.types[type][target._id].data, key, () => value);\n    },\n  };\n\n  return client;\n};\n\nconst s = (target, key, setter) => {\n  const t = target[key];\n\n  target[key] = setter(t);\n};\n\nconst checkEntityPassesQuery = (query: EsormQuery, entity: any) => {\n  if (query.operator === \"and\") return query.conditions.every((condition) => checkEntityPassesQuery(condition, entity));\n  if (query.operator === \"or\") return query.conditions.some((condition) => checkEntityPassesQuery(condition, entity));\n  if (query.operator === \"=\") return entity[query.column] === query.value;\n  if (query.operator === \"!=\") return entity[query.column] !== query.value;\n  if (query.operator === \"in\") return query.value.includes(entity[query.column]);\n\n  return false;\n};\n\nconst createSocket = (options: { url: string; onConnect: (ws: WebSocket) => void }) => {\n  let ws = null as WebSocket;\n\n  const reconnect = () => {\n    console.log(\"WS: Reconnecting\");\n\n    ws = new WebSocket(options.url);\n\n    options.onConnect(ws);\n\n    ws.addEventListener(\"open\", () => {\n      console.log(\"WS: Connected\");\n    });\n\n    ws.addEventListener(\"close\", () => {\n      console.log(\"WS: Closed\");\n    });\n  };\n\n  const loop = () => {\n    if (ws.readyState === ws.CLOSED) reconnect();\n\n    setTimeout(loop, 5000);\n  };\n\n  reconnect();\n  loop();\n};\n\nconst createSelfCleaningCache = () => {\n  const cache = {} as Record<string, any>;\n  const counts = {} as Record<string, number>;\n\n  return {\n    getOrCreate: <T>(scope: any, init: () => T): T => {\n      const key = deterministicStringify(scope);\n\n      cache[key] = cache[key] ?? init();\n      counts[key] = (counts[key] ?? 0) + 1;\n\n      return cache[key];\n    },\n    cleanup: (scope: any) => {\n      const key = deterministicStringify(scope);\n\n      counts[key] = Math.max(0, (counts[key] ?? 0) - 1);\n\n      if ((counts[key] ?? 0) <= 0) {\n        delete cache[key];\n        delete counts[key];\n      }\n    },\n  };\n};\n\nconst deterministicStringify = (input: any) => {\n  const deterministicReplacer = (_, v) =>\n    typeof v !== \"object\" || v === null || Array.isArray(v) ? v : Object.fromEntries(Object.entries(v).sort(([ka], [kb]) => (ka < kb ? -1 : ka > kb ? 1 : 0)));\n\n  return JSON.stringify(input, deterministicReplacer);\n};\n","export const createBatchOperationRecord = () => {\n  const operation: EsormBatchOperation = {\n    types: {},\n  };\n\n  return operation;\n};\n\nexport const checkDoesBatchOperationRecordHaveChanges = (operation: EsormBatchOperation) => {\n  return Object.keys(operation.types).length > 0;\n};\n\nexport type EsormBatchOperation = {\n  types: Record<\n    string,\n    Record<\n      string,\n      {\n        action: \"create\" | \"update\" | \"delete\";\n        data: any;\n      }\n    >\n  >;\n};\n"],"mappings":";AA0BO,IAAM,oBAAoB;AAAA,EAC/B,OAAO,CAAC,QAAgB,UAA8B,UAAe;AACnE,UAAM,YAAiC;AAAA,MACrC;AAAA,MACA;AAAA,MACA;AAAA,IACF;AAEA,WAAO;AAAA,EACT;AAAA,EACA,KAAK,IAAI,gBAA8B,EAAE,UAAU,OAAgB,WAAW;AAAA,EAC9E,IAAI,IAAI,gBAA8B,EAAE,UAAU,MAAe,WAAW;AAC9E;;;ACnCA,SAAS,oBAA8B,aAAa,iBAAiB;AACrE,SAAS,cAA0B,iBAA0B;;;ACJtD,IAAM,6BAA6B,MAAM;AAC9C,QAAM,YAAiC;AAAA,IACrC,OAAO,CAAC;AAAA,EACV;AAEA,SAAO;AACT;AAEO,IAAM,2CAA2C,CAAC,cAAmC;AAC1F,SAAO,OAAO,KAAK,UAAU,KAAK,EAAE,SAAS;AAC/C;;;ADFO,IAAM,cAAc,MAAwD;AAOjF,eAAa;AAAA,IACX,KAAK;AAAA,IACL,WAAW,CAAC,OAAO;AACjB,SAAG,iBAAiB,QAAQ,MAAM;AAChC,WAAG,KAAK,KAAK,UAAU,EAAE,QAAQ,aAAa,MAAM,cAAc,CAAC,CAAC;AAEpE,WAAG,iBAAiB,WAAW,CAAC,MAAM;AACpC,gBAAM,OAAO,KAAK,MAAM,EAAE,IAAI;AAE9B,kBAAQ,IAAI,eAAe,IAAI;AAAA,QACjC,CAAC;AAAA,MACH,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,QAAM,MAAM,OAAO,SAAc;AAC/B,UAAM,WAAW,MAAM,MAAM,eAAe;AAAA,MAC1C,QAAQ;AAAA,MACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,MAC9C,MAAM,KAAK,UAAU,IAAI;AAAA,IAC3B,CAAC;AAED,QAAI,SAAS,IAAI;AACf,YAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,aAAQ,KAAa;AAAA,IACvB;AAAA,EACF;AAEA,QAAM,QAAQ,mBAAmB;AAAA,IAC/B,UAAU,oBAAI,IAAiB;AAAA,IAC/B,SAAS,CAAC;AAAA,IAEV,gBAAgB,CAAqC,MAAS,aAA8B;AAC1F,eAAS,QAAQ,CAAC,WAAW;AAC3B,cAAM,MAAM,GAAG,IAAI,IAAI,OAAO,GAAG;AAEjC,cAAM,SAAS,IAAI,KAAK,MAAM;AAAA,MAChC,CAAC;AAAA,IACH;AAAA,EACF,CAAC;AAED,QAAM,UAAU;AAAA,IACd,sBAAsB,2BAA2B;AAAA;AAAA,IACjD,iBAAiB,2BAA2B;AAAA;AAAA,EAC9C;AAEA,QAAM,SAAS,YAAY;AACzB,QAAI,yCAAyC,QAAQ,eAAe,GAAG;AACrE,cAAQ,IAAI,sBAAsB,QAAQ,eAAe;AAEzD,cAAQ,uBAAuB,QAAQ;AACvC,cAAQ,kBAAkB,2BAA2B;AAErD,YAAM,IAAI;AAAA,QACR,QAAQ;AAAA,QACR,YAAY,QAAQ;AAAA,MACtB,CAAC;AAAA,IACH;AAEA,eAAW,QAAQ,GAAI;AAAA,EACzB;AAEA,SAAO;AAEP,QAAM,mBAAmB,CAAuC,YAM1D;AACJ,UAAM,QAAQ,QAAQ,MAAM,iBAAiB;AAC7C,UAAM,MAAM,uBAAuB;AAAA,MACjC,GAAG;AAAA,MACH;AAAA,IACF,CAAC;AAED,UAAM,SAAS,MAAM;AACnB,cAAQ,IAAI,kBAAkB,GAAG;AAEjC,YAAM,QAAQ,mBAAmB;AAAA,QAC/B;AAAA,QAEA,OAAO;AAAA,QAEP,WAAW;AAAA,QACX,SAAS;AAAA,QAET,IAAI,OAAO;AACT,gBAAM,IAAuB,CAAC,GAAG,MAAM,QAAQ,EAC5C,OAAO,CAAC,CAACA,MAAK,KAAK,MAAM;AACxB,gBAAI,CAACA,KAAI,WAAW,QAAQ,IAAI;AAAG,qBAAO;AAE1C,mBAAO,QAAQ,uBAAuB,OAAO,KAAK,IAAI;AAAA,UACxD,CAAC,EACA,IAAI,CAAC,CAACA,MAAK,KAAK,MAAM,KAAK;AAE9B,iBAAO;AAAA,QACT;AAAA,QAEA,OAAO,YAAY;AACjB,sBAAY,MAAM;AAChB,kBAAM,YAAY;AAClB,kBAAM,UAAU;AAAA,UAClB,CAAC;AAED,gBAAM,SAAS,MAAM,OAAO,QAAQ,OAAO;AAE3C,gBAAM,QAAQ,MAAM;AAEpB,gBAAM,eAAe,QAAQ,MAAM,MAAM;AAAA,QAC3C;AAAA,QACA,SAAS,CAAC,SAA4B;AACpC,kBAAQ,IAAI,eAAe;AAE3B,gBAAM,YAAY;AAClB,gBAAM,UAAU;AAAA,QAClB;AAAA,QACA,OAAO,MAAM;AACX,gBAAM,YAAY;AAClB,gBAAM,UAAU;AAAA,QAClB;AAAA,QACA,SAAS,MAAM;AACb,kBAAQ,IAAI,qBAAqB;AAEjC,gBAAM,QAAQ,GAAG,EAAE;AAEnB,cAAI,MAAM,QAAQ,GAAG,EAAE,UAAU,GAAG;AAClC,oBAAQ,IAAI,0BAA0B;AAEtC,mBAAO,MAAM,QAAQ,GAAG;AAAA,UAC1B;AAAA,QACF;AAAA,MACF,CAAC;AAED,gBAAU,MAAM,MAAM,MAAM,CAAC;AAE7B,aAAO;AAAA,IACT;AAEA,gBAAY,MAAM;AAChB,UAAI,MAAM,QAAQ,GAAG,MAAM,QAAW;AACpC,cAAM,QAAQ,GAAG,IAAI,OAAO;AAAA,MAC9B,OAAO;AACL,cAAM,QAAQ,GAAG,EAAE;AAAA,MACrB;AAAA,IACF,CAAC;AAED,WAAO,MAAM,QAAQ,GAAG;AAAA,EAC1B;AAEA,QAAM,SAAS;AAAA,IACb,WAAW,OAAqC,MAAW,SAA0B;AACnF,YAAM,WAAW,MAAM,MAAM,eAAe;AAAA,QAC1C,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC9C,MAAM,KAAK,UAAU;AAAA,UACnB,QAAQ;AAAA,UACR;AAAA,UACA;AAAA,QACF,CAAC;AAAA,MACH,CAAC;AAED,UAAI,SAAS,IAAI;AACf,cAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,eAAQ,KAAa;AAAA,MACvB;AAAA,IACF;AAAA,IACA,SAAS,OAAoC,YAIvC;AAKJ,YAAM,WAAW,MAAM,MAAM,eAAe;AAAA,QAC1C,QAAQ;AAAA,QACR,SAAS,EAAE,gBAAgB,mBAAmB;AAAA,QAC9C,MAAM,KAAK,UAAU;AAAA,UACnB,QAAQ;AAAA,UACR,MAAM,QAAQ;AAAA,UACd,OAAO,QAAQ,QAAQ,iBAAiB;AAAA,UACxC,MAAM,QAAQ;AAAA,QAChB,CAAC;AAAA,MACH,CAAC;AAED,UAAI,SAAS,IAAI;AACf,cAAM,OAAO,MAAM,SAAS,KAAK;AAEjC,eAAQ,KAAa;AAAA,MACvB,OAAO;AACL,cAAM,IAAI,MAAM,SAAS,UAAU;AAAA,MACrC;AAAA,IACF;AAAA;AAAA,IAGA,aAAa,CACX,eAOG;AACH,YAAM,QAAQ,mBAAmB;AAAA,QAC/B,IAAI,QAAQ;AACV,kBAAQ,IAAI,SAAS;AAErB,gBAAM,UAAU,WAAW;AAE3B,iBAAO,iBAAiB,OAAO;AAAA,QACjC;AAAA,MACF,CAAC;AAED,mBAAa,MAAM;AACjB,cAAM,QAAQ,MAAM;AAEpB,kBAAU,MAAM,MAAM,QAAQ,CAAC;AAAA,MACjC,CAAC;AAED,aAAO;AAAA,IACT;AAAA,IAEA,mBAAmB,CAAwC,MAAW,UAA2B;AAC/F,YAAM,eAAe,MAAM,CAAC,KAAK,CAAC;AAElC,QAAE,QAAQ,gBAAgB,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;AACrD,QAAE,QAAQ,gBAAgB,MAAM,IAAI,GAAG,MAAM,KAAK,OAAO,EAAE,QAAQ,UAAU,MAAM,MAAM,EAAE;AAAA,IAC7F;AAAA,IACA,gBAAgB,CACd,MACA,QACA,KACA,UACG;AACH,kBAAY,MAAM;AAChB,eAAO,GAAG,IAAI;AAAA,MAChB,CAAC;AAED,QAAE,QAAQ,gBAAgB,OAAO,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC;AACrD,QAAE,QAAQ,gBAAgB,MAAM,IAAI,GAAG,OAAO,KAAK,CAAC,MAAM,KAAK,EAAE,QAAQ,UAAU,MAAM,CAAC,EAAE,CAAC;AAC7F,QAAE,QAAQ,gBAAgB,MAAM,IAAI,EAAE,OAAO,GAAG,EAAE,MAAM,KAAK,MAAM,KAAK;AAAA,IAC1E;AAAA,EACF;AAEA,SAAO;AACT;AAEA,IAAM,IAAI,CAAC,QAAQ,KAAK,WAAW;AACjC,QAAM,IAAI,OAAO,GAAG;AAEpB,SAAO,GAAG,IAAI,OAAO,CAAC;AACxB;AAEA,IAAM,yBAAyB,CAAC,OAAmB,WAAgB;AACjE,MAAI,MAAM,aAAa;AAAO,WAAO,MAAM,WAAW,MAAM,CAAC,cAAc,uBAAuB,WAAW,MAAM,CAAC;AACpH,MAAI,MAAM,aAAa;AAAM,WAAO,MAAM,WAAW,KAAK,CAAC,cAAc,uBAAuB,WAAW,MAAM,CAAC;AAClH,MAAI,MAAM,aAAa;AAAK,WAAO,OAAO,MAAM,MAAM,MAAM,MAAM;AAClE,MAAI,MAAM,aAAa;AAAM,WAAO,OAAO,MAAM,MAAM,MAAM,MAAM;AACnE,MAAI,MAAM,aAAa;AAAM,WAAO,MAAM,MAAM,SAAS,OAAO,MAAM,MAAM,CAAC;AAE7E,SAAO;AACT;AAEA,IAAM,eAAe,CAAC,YAAiE;AACrF,MAAI,KAAK;AAET,QAAM,YAAY,MAAM;AACtB,YAAQ,IAAI,kBAAkB;AAE9B,SAAK,IAAI,UAAU,QAAQ,GAAG;AAE9B,YAAQ,UAAU,EAAE;AAEpB,OAAG,iBAAiB,QAAQ,MAAM;AAChC,cAAQ,IAAI,eAAe;AAAA,IAC7B,CAAC;AAED,OAAG,iBAAiB,SAAS,MAAM;AACjC,cAAQ,IAAI,YAAY;AAAA,IAC1B,CAAC;AAAA,EACH;AAEA,QAAM,OAAO,MAAM;AACjB,QAAI,GAAG,eAAe,GAAG;AAAQ,gBAAU;AAE3C,eAAW,MAAM,GAAI;AAAA,EACvB;AAEA,YAAU;AACV,OAAK;AACP;AA4BA,IAAM,yBAAyB,CAAC,UAAe;AAC7C,QAAM,wBAAwB,CAAC,GAAG,MAChC,OAAO,MAAM,YAAY,MAAM,QAAQ,MAAM,QAAQ,CAAC,IAAI,IAAI,OAAO,YAAY,OAAO,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE,MAAO,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,CAAE,CAAC;AAE3J,SAAO,KAAK,UAAU,OAAO,qBAAqB;AACpD;","names":["key"]}