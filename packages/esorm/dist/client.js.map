{"version":3,"sources":["../src/client.ts","../src/client/client-query.ts","../src/query.ts","../src/utils.ts","../src/client/client-socket.ts","../src/client/client-operations.ts","../src/batch.ts","../src/client/client-api-driver.ts","../src/client/client-utils.ts"],"sourcesContent":["import { z } from \"zod\";\nimport { EsormQuery, EsormQueryBuilder } from \"./query\";\nimport { makeAutoObservable, observe, runInAction } from \"mobx\";\nimport { createEffect, onCleanup } from \"solid-js\";\nimport { ClientQueryModule as ClientQueryModule } from \"./client/client-query\";\nimport { deterministicStringify } from \"./utils\";\nimport { ClientSocketModule } from \"./client/client-socket\";\nimport { ClientOperationsModule } from \"./client/client-operations\";\nimport { ClientApiDriver } from \"./client/client-api-driver\";\nimport { set } from \"./client/client-utils\";\nimport { EsormSchemaDefinition } from \"./common/schema\";\n\nexport const EsormClient = <R extends { _SCHEMATYPE: EsormSchemaDefinition }>() => {\n  type SchemaType = R[\"_SCHEMATYPE\"];\n  type BaseType = { _id: string };\n  type EntityType<K extends keyof SchemaType> = BaseType &\n    Partial<{ [P in keyof SchemaType[K][\"properties\"]]: z.infer<SchemaType[K][\"properties\"][P][\"schema\"]> }>;\n  type FinalType = { [Key in keyof SchemaType]: EntityType<Key> };\n\n  const apiDriver = new ClientApiDriver();\n  const operationsModule = new ClientOperationsModule({ apiDriver });\n  const queryModule = new ClientQueryModule<FinalType>({ apiDriver });\n  const socketModule = new ClientSocketModule({\n    url: \"/ws\",\n    operationsModule,\n    queryModule,\n  });\n\n  callbackPerObject({\n    target: queryModule.queries,\n    getKey: (x) => x.key,\n    onCallback: () => {},\n    onCleanup: () => {},\n  });\n\n  const client = {\n    apiDriver,\n    operationsModule,\n    queryModule,\n    socketModule,\n\n    /** For use with SolidJS */\n    createQuery: <Key extends keyof FinalType & string>(\n      getOptions: () => {\n        type: Key;\n        query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n        sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n        limit?: number;\n        offset?: number;\n      },\n    ) => {\n      const state = makeAutoObservable({\n        get query() {\n          console.log(\"GETTING\");\n\n          const options = getOptions();\n\n          return queryModule.getOrCreateQuery(options);\n        },\n      });\n\n      createEffect(() => {\n        const query = state.query;\n\n        onCleanup(() => query.dispose());\n      });\n\n      return state;\n    },\n\n    createEntityValue: <Key extends keyof SchemaType & string>(type: Key, value: EntityType<Key>) => {\n      queryModule.updateEntities(type, [value]);\n\n      set(operationsModule.operationsLocal.types, type, (x) => x ?? {});\n      set(operationsModule.operationsLocal.types[type], value._id, () => ({ action: \"create\", data: value }));\n    },\n    setEntityValue: <Key extends keyof SchemaType & string, K extends keyof EntityType<Key> & string>(\n      type: Key,\n      target: EntityType<Key>,\n      key: K,\n      value: EntityType<Key>[K] | undefined,\n    ) => {\n      runInAction(() => {\n        target[key] = value;\n      });\n\n      set(operationsModule.operationsLocal.types, type, (x) => x ?? {});\n      set(operationsModule.operationsLocal.types[type], target._id, (x) => x ?? { action: \"update\", data: {} });\n      set(operationsModule.operationsLocal.types[type][target._id].data, key, () => value);\n    },\n  };\n\n  return client;\n};\n\nconst createSelfCleaningCache = () => {\n  const cache = {} as Record<string, any>;\n  const counts = {} as Record<string, number>;\n\n  return {\n    getOrCreate: <T>(scope: any, init: () => T): T => {\n      const key = deterministicStringify(scope);\n\n      cache[key] = cache[key] ?? init();\n      counts[key] = (counts[key] ?? 0) + 1;\n\n      return cache[key];\n    },\n    cleanup: (scope: any) => {\n      const key = deterministicStringify(scope);\n\n      counts[key] = Math.max(0, (counts[key] ?? 0) - 1);\n\n      if ((counts[key] ?? 0) <= 0) {\n        delete cache[key];\n        delete counts[key];\n      }\n    },\n  };\n};\n\nconst callbackPerObject = <T>(options: { target: Record<string, T>; getKey: (o: T) => string; onCallback: (o: T) => void; onCleanup: (o: T) => void }) => {\n  const cache = new Set<string>();\n\n  observe(options.target, (changes) => {\n    console.log({ changes });\n  });\n};\n","import { makeAutoObservable, runInAction, toJS, untracked } from \"mobx\";\nimport { EsormQuery, EsormQueryBuilder, checkEntityPassesQuery } from \"../query\";\nimport { deterministicStringify } from \"../utils\";\nimport { BaseSchema } from \"./client-utils\";\nimport { ClientApiDriver } from \"./client-api-driver\";\nimport { EsormBatchOperation } from \"../batch\";\n\nexport class ClientQueryModule<Schema extends BaseSchema> {\n  entities = new Map<string, any>();\n  queries = {} as Record<string, any>;\n  options: ClientQueryModuleOptions;\n\n  constructor(options: ClientQueryModuleOptions) {\n    makeAutoObservable(this);\n\n    this.options = options;\n  }\n\n  getMany = async <Key extends keyof Schema>(options: {\n    type: Key;\n    query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n    sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n  }) => {\n    // TODO: This method should basically create a query, read the data, and then unsubscribe from the query right away.\n    // This way, this function uses the exact same logic as other queries, but does not hold onto the subscription longer than necessary.\n    // The user should be warned that using esorm this way is not recommended.\n\n    const result = await this.options.apiDriver.reqEntity({\n      action: \"get-many\",\n      type: options.type,\n      query: options.query?.(EsormQueryBuilder),\n      sort: options.sort,\n    });\n\n    return result as Schema[Key][];\n  };\n\n  getOrCreateQuery = <Type extends keyof Schema & string>(options: {\n    type: Type;\n    query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n    sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n    limit?: number;\n    offset?: number;\n  }) => {\n    const module = this; // Need to cache here to use in context below\n    const query = options.query(EsormQueryBuilder);\n    const key = deterministicStringify({\n      ...options,\n      query,\n    });\n\n    const create = () => {\n      console.log(\"Creating Query\", key);\n\n      const state = makeAutoObservable({\n        key,\n        query,\n\n        count: 1,\n\n        isLoading: true,\n        isError: false,\n\n        get data() {\n          const r: Schema[Type][] = [...module.entities]\n            .filter(([key, value]) => {\n              if (!key.startsWith(options.type)) return false;\n\n              return query ? checkEntityPassesQuery(query, value) : true;\n            })\n            .map(([key, value]) => value);\n\n          return r;\n        },\n\n        start: async () => {\n          runInAction(() => {\n            state.isLoading = true;\n            state.isError = false;\n          });\n\n          try {\n            const result = await this.getMany(options);\n\n            state.success(result);\n\n            this.updateEntities(options.type, result);\n          } catch (e) {\n            state.error();\n          }\n        },\n        success: (data: Schema[Type][]) => {\n          console.log(\"QUERY SUCCESS\");\n\n          state.isLoading = false;\n          state.isError = false;\n        },\n        error: () => {\n          state.isLoading = false;\n          state.isError = true;\n        },\n        dispose: () => {\n          console.log(\"DISPOSING QUERY (?)\");\n\n          this.queries[key].count--;\n\n          if (this.queries[key].count === 0) {\n            console.log(\"EMPTY QUERY. REMOVING...\");\n\n            delete this.queries[key];\n          }\n        },\n      });\n\n      untracked(() => state.start());\n\n      return state;\n    };\n\n    runInAction(() => {\n      if (this.queries[key] === undefined) {\n        this.queries[key] = create();\n      } else {\n        this.queries[key].count++;\n      }\n    });\n\n    return this.queries[key] as ReturnType<typeof create>;\n  };\n\n  updateEntities = <Type extends keyof Schema & string>(type: Type, entities: Schema[Type][]) => {\n    entities.forEach((entity) => {\n      const key = `${type}|${entity._id}`;\n\n      this.entities.set(key, entity);\n    });\n  };\n\n  applyOperation = (patch: EsormBatchOperation) => {\n    Object.entries(patch.types).forEach(([type, record]) => {\n      Object.entries(record).forEach(([id, entry]) => {\n        const k = `${type}|${id}`;\n\n        if (entry.action === \"delete\") {\n          this.entities.delete(k);\n        } else {\n          const target = this.entities.get(k);\n\n          if (target) {\n            Object.entries(entry.data).forEach(([key, value]) => {\n              console.log(\"SET\", key, value);\n\n              target[key] = value;\n            });\n          } else {\n            console.log(\"CREATE\", entry.data);\n\n            this.entities.set(k, entry.data);\n          }\n        }\n      });\n    });\n  };\n}\n\ntype ClientQueryModuleOptions = {\n  apiDriver: ClientApiDriver;\n};\n","export type EsormQueryOperator = \"=\" | \"in\" | \"<\" | \"<=\" | \">\" | \">=\" | \"!=\";\nexport type EsormQueryCondition = {\n  operator: EsormQueryOperator;\n  column: string;\n  value: any;\n};\nexport type EsormQuery =\n  | undefined\n  | EsormQueryCondition\n  | {\n      operator: \"and\";\n      conditions: EsormQuery[];\n    }\n  | {\n      operator: \"or\";\n      conditions: EsormQuery[];\n    };\n\nexport type EsormQueryOptions = {\n  type: string;\n  query?: EsormQuery;\n  sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n  limit?: number;\n  offset?: number;\n};\n\nexport const EsormQueryBuilder = {\n  where: (column: string, operator: EsormQueryOperator, value: any) => {\n    const condition: EsormQueryCondition = {\n      operator,\n      column,\n      value,\n    };\n\n    return condition;\n  },\n  and: (...conditions: EsormQuery[]) => ({ operator: \"and\" as const, conditions }),\n  or: (...conditions: EsormQuery[]) => ({ operator: \"or\" as const, conditions }),\n};\n\nexport const checkEntityPassesQuery = (query: EsormQuery, entity: any) => {\n  if (query.operator === \"and\") return query.conditions.every((condition) => checkEntityPassesQuery(condition, entity));\n  if (query.operator === \"or\") return query.conditions.some((condition) => checkEntityPassesQuery(condition, entity));\n  if (query.operator === \"=\") return entity[query.column] === query.value;\n  if (query.operator === \"!=\") return entity[query.column] !== query.value;\n  if (query.operator === \"in\") return query.value.includes(entity[query.column]);\n\n  return false;\n};\n","export const deterministicStringify = (input: any) => {\n  const deterministicReplacer = (_, v) =>\n    typeof v !== \"object\" || v === null || Array.isArray(v) ? v : Object.fromEntries(Object.entries(v).sort(([ka], [kb]) => (ka < kb ? -1 : ka > kb ? 1 : 0)));\n\n  return JSON.stringify(input, deterministicReplacer);\n};\n\nexport const create2DSet = () => {\n  const map = {} as Record<string, Set<any>>;\n\n  return {\n    values: (scope: string) => [...(map[scope] ?? [])],\n    add: (scope: string, obj: any) => {\n      if (map[scope] === undefined) map[scope] = new Set();\n\n      map[scope].add(obj);\n    },\n    delete: (scope: string, obj: any) => {\n      if (map[scope] === undefined) map[scope] = new Set();\n\n      map[scope].delete(obj);\n    },\n  };\n};\n\nexport const create2DRecord = <T>() => {\n  const map = {} as Record<string, Record<string, T>>;\n\n  return {\n    values: (scope: string) => Object.values(map[scope]),\n    add: (scope: string, key: string, obj: T) => {\n      if (map[scope] === undefined) map[scope] = {};\n\n      map[scope][key] = obj;\n    },\n    delete: (scope: string, key: string) => {\n      if (map[scope] === undefined) map[scope] = {};\n\n      delete map[scope][key];\n    },\n  };\n};\n","import { makeAutoObservable, observe } from \"mobx\";\nimport { BaseSchema } from \"./client-utils\";\nimport { EsormQuery } from \"../query\";\nimport { ClientQueryModule } from \"./client-query\";\nimport { EsormBatchOperation } from \"../batch\";\nimport { ClientOperationsModule } from \"./client-operations\";\n\nexport class ClientSocketModule<Schema extends BaseSchema> {\n  options: ClientSocketOptions<Schema>;\n  ws: WebSocket;\n\n  constructor(options: ClientSocketOptions<Schema>) {\n    this.options = options;\n\n    observe(options.queryModule.queries, (changes) => {\n      if (this.ws.readyState === WebSocket.OPEN) {\n        if (changes.type === \"add\") this.subscribeToQuery(changes.newValue.query);\n        if (changes.type === \"remove\") this.unsubscribeFromQuery(changes.oldValue.query);\n      }\n    });\n\n    this.reconnect();\n    this.loop();\n\n    makeAutoObservable(this);\n  }\n\n  loop() {\n    if (this.ws.readyState === WebSocket.CLOSED) this.reconnect();\n\n    setTimeout(() => this.loop(), 5000);\n  }\n\n  reconnect() {\n    console.log(\"WS: Reconnecting\");\n\n    this.ws = new WebSocket(this.options.url);\n\n    this.ws.addEventListener(\"open\", () => {\n      console.log(\"WS: Connected\");\n\n      // Send a test message\n      this.send(\"test\", \"Hello World\");\n\n      // Subscribe to all currently mounted queries\n      Object.values(this.options.queryModule.queries).forEach((query) => {\n        this.subscribeToQuery(query.query);\n      });\n    });\n\n    this.ws.addEventListener(\"close\", () => {\n      console.log(\"WS: Closed\");\n    });\n\n    this.ws.addEventListener(\"message\", (e) => {\n      const json = JSON.parse(e.data);\n\n      console.log(\"WS: Message\", json);\n\n      if (json.action === \"patch\") {\n        const data = json.data as EsormBatchOperation;\n\n        this.options.queryModule.applyOperation(data);\n        this.options.queryModule.applyOperation(this.options.operationsModule.operationsCommitting);\n        this.options.queryModule.applyOperation(this.options.operationsModule.operationsLocal);\n      }\n    });\n  }\n\n  send = (action: string, data: any) => {\n    const json = JSON.stringify({\n      action,\n      data,\n    });\n\n    this.ws.send(json);\n  };\n\n  subscribeToQuery = (query: EsormQuery) => this.send(\"subscribe\", { query });\n  unsubscribeFromQuery = (query: EsormQuery) => this.send(\"unsubscribe\", { query });\n}\n\ntype ClientSocketOptions<Schema extends BaseSchema> = {\n  url: string;\n  operationsModule: ClientOperationsModule<Schema>;\n  queryModule: ClientQueryModule<Schema>;\n};\n","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { BaseSchema } from \"./client-utils\";\nimport { EsormBatchOperation, checkDoesBatchOperationRecordHaveChanges, createBatchOperationRecord } from \"../batch\";\nimport { ClientApiDriver } from \"./client-api-driver\";\n\nexport class ClientOperationsModule<FinalType extends BaseSchema> {\n  operationsCommitting = createBatchOperationRecord(); // Operations that are local that are being committed\n  operationsLocal = createBatchOperationRecord(); // Operations that are local that are not yet being committed\n  options: ClientOperationsModuleOptions;\n\n  constructor(options: ClientOperationsModuleOptions) {\n    makeAutoObservable(this);\n\n    this.options = options;\n    this.update();\n  }\n\n  update = async () => {\n    if (checkDoesBatchOperationRecordHaveChanges(this.operationsLocal)) {\n      console.log(\"Pushing Updates...\", this.operationsLocal);\n\n      runInAction(() => {\n        this.operationsCommitting = this.operationsLocal;\n        this.operationsLocal = createBatchOperationRecord();\n      });\n\n      await this.options.apiDriver.reqEntity({\n        action: \"apply-operation\",\n        operations: this.operationsCommitting,\n      });\n\n      runInAction(() => {\n        this.operationsCommitting = createBatchOperationRecord();\n      });\n    }\n\n    setTimeout(() => this.update(), 1000);\n  };\n}\n\ntype ClientOperationsModuleOptions = {\n  apiDriver: ClientApiDriver;\n};\n","import merge from \"merge\";\n\nexport const createBatchOperationRecord = () => {\n  const operation: EsormBatchOperation = {\n    types: {},\n  };\n\n  return operation;\n};\n\nexport const appendBatchOperationRecord = (target: EsormBatchOperation, update: EsormBatchOperation) => {\n  merge.recursive(target, update);\n};\n\nexport const checkDoesBatchOperationRecordHaveChanges = (operation: EsormBatchOperation) => {\n  return Object.keys(operation.types).length > 0;\n};\n\nexport type EsormBatchOperation = {\n  types: Record<\n    string,\n    Record<\n      string,\n      {\n        action: \"create\" | \"update\" | \"delete\";\n        data: any;\n      }\n    >\n  >;\n};\n","export class ClientApiDriver {\n  constructor() {}\n\n  req = async (options: { url: string; body: any }) => {\n    const response = await fetch(options.url, {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(options.body),\n    });\n\n    if (response.ok) {\n      const json = await response.json();\n\n      return (json as any).data as unknown;\n    }\n  };\n\n  reqEntity = async (body: any) => this.req({ url: \"/api/entity\", body });\n}\n","export type BaseSchema = {\n  [key: string]: {\n    _id: string;\n  };\n};\n\nexport const set = (target, key, setter) => {\n  const t = target[key];\n\n  target[key] = setter(t);\n};\n"],"mappings":"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","names":["makeAutoObservable","observe","runInAction","key","makeAutoObservable","makeAutoObservable","runInAction","makeAutoObservable","runInAction","makeAutoObservable","runInAction","observe"]}