{"version":3,"sources":["../src/query.ts","../src/client.ts"],"sourcesContent":["export type EsormQueryOperator = \"=\" | \"in\" | \"<\" | \"<=\" | \">\" | \">=\" | \"!=\";\nexport type EsormQueryCondition = {\n  operator: EsormQueryOperator;\n  column: string;\n  value: any;\n};\nexport type EsormQuery =\n  | undefined\n  | EsormQueryCondition\n  | {\n      operator: \"and\";\n      conditions: EsormQuery[];\n    }\n  | {\n      operator: \"or\";\n      conditions: EsormQuery[];\n    };\n\nexport type EsormQueryOptions = {\n  type: string;\n  query?: EsormQuery;\n  sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n  limit?: number;\n  offset?: number;\n};\n\nexport const EsormQueryBuilder = {\n  where: (column: string, operator: EsormQueryOperator, value: any) => {\n    const condition: EsormQueryCondition = {\n      operator,\n      column,\n      value,\n    };\n\n    return condition;\n  },\n  and: (...conditions: EsormQuery[]) => ({ operator: \"and\" as const, conditions }),\n  or: (...conditions: EsormQuery[]) => ({ operator: \"or\" as const, conditions }),\n};\n","import { z } from \"zod\";\nimport { EsormSchemaDefinition } from \"./v2\";\nimport { EsormQuery, EsormQueryBuilder } from \"./query\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { createEffect, onCleanup } from \"solid-js\";\nimport { EsormOperation } from \"./operation\";\n\nexport const EsormClient = <R extends { _SCHEMATYPE: EsormSchemaDefinition }>() => {\n  type SchemaType = R[\"_SCHEMATYPE\"];\n  type BaseType = { _id: string };\n  type EntityType<K extends keyof SchemaType> = BaseType &\n    Partial<{ [P in keyof SchemaType[K][\"properties\"]]: z.infer<SchemaType[K][\"properties\"][P][\"schema\"]> }>;\n  type FinalType = { [Key in keyof SchemaType]: EntityType<Key> };\n\n  const req = async (body: any) => {\n    const response = await fetch(\"/api/entity\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n\n    if (response.ok) {\n      const json = await response.json();\n\n      return (json as any).data as unknown;\n    }\n  };\n\n  const cache = {\n    operationsCommitting: [] as EsormOperation[], // Operations that are local that are being committed\n    operationsLocal: [] as EsormOperation[], // Operations that are local that are not yet being committed\n  };\n\n  const update = async () => {\n    if (cache.operationsLocal.length) {\n      console.log(\"Pushing Updates...\");\n\n      cache.operationsCommitting = cache.operationsLocal;\n      cache.operationsLocal = [];\n\n      await req({\n        operation: \"operations\",\n        operations: cache.operationsCommitting,\n      });\n    }\n\n    setTimeout(update, 1000);\n  };\n\n  update();\n\n  const client = {\n    createOne: async <Key extends keyof SchemaType>(type: Key, data: EntityType<Key>) => {\n      const response = await fetch(\"/api/entity\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          action: \"create-one\",\n          type,\n          data,\n        }),\n      });\n\n      if (response.ok) {\n        const json = await response.json();\n\n        return (json as any).data as FinalType[Key][];\n      }\n    },\n    getMany: async <Key extends keyof FinalType>(options: {\n      type: Key;\n      query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n      sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n      limit?: number;\n      offset?: number;\n    }) => {\n      const response = await fetch(\"/api/entity\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          action: \"get-many\",\n          type: options.type,\n          query: options.query?.(EsormQueryBuilder),\n          sort: options.sort,\n          limit: options.limit,\n          offset: options.offset,\n        }),\n      });\n\n      if (response.ok) {\n        const json = await response.json();\n\n        return (json as any).data as FinalType[Key][];\n      }\n    },\n\n    createQuery: <Key extends keyof FinalType>(\n      options: () => {\n        type: Key;\n        query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n        sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n        limit?: number;\n        offset?: number;\n      },\n    ) => {\n      const state = makeAutoObservable({\n        isLoading: true,\n        isError: false,\n        data: [] as EntityType<Key>[],\n\n        success: (data: EntityType<Key>[]) => {\n          console.log(\"QUERY SUCCESS\");\n\n          state.isLoading = false;\n          state.isError = false;\n          state.data = data;\n        },\n        error: () => {\n          state.isLoading = false;\n          state.isError = true;\n        },\n      });\n\n      createEffect(async () => {\n        let isCurrent = true;\n\n        onCleanup(() => (isCurrent = false));\n\n        const o = options();\n\n        const result = await client.getMany(o);\n\n        if (o.limit) {\n          state.success(result.slice(0, o.limit));\n        } else {\n          state.success(result);\n        }\n      });\n\n      return state;\n    },\n\n    setEntityValue: <Key extends keyof SchemaType & string, K extends keyof EntityType<Key> & string>(\n      type: Key,\n      target: EntityType<Key>,\n      key: K,\n      value: EntityType<Key>[K] | undefined,\n    ) => {\n      runInAction(() => {\n        target[key] = value;\n      });\n\n      cache.operationsLocal.push({\n        operation: \"update\",\n        type,\n        id: target._id,\n        column: key,\n        value,\n      });\n    },\n  };\n\n  return client;\n};\n\ntype EsormBatchOperation = {\n  create: Record<string, any>;\n  update: Record<string, any>;\n  delete: Record<string, any>;\n};\n"],"mappings":"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","names":[]}