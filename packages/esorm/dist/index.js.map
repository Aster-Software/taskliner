{"version":3,"sources":["../src/mongo.ts","../src/v2.ts","../src/query.ts","../src/client.ts","../src/index.ts"],"sourcesContent":["import { createId } from \"@paralleldrive/cuid2\";\nimport { MongoClient, ObjectId, ServerApiVersion } from \"mongodb\";\n\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\n\nexport const createClient = async (url: string) => {\n  const client = new MongoClient(url, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true,\n    },\n  });\n\n  // Connect the client to the server\t(optional starting in v4.7)\n  await client.connect();\n\n  // Send a ping to confirm a successful connection\n  await client.db(\"admin\").command({ ping: 1 });\n\n  console.log(\"Pinged your deployment. You successfully connected to MongoDB!\");\n\n  return client;\n};\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n","import { ObjectId } from \"mongodb\";\nimport { createClient as createMongoDBClient } from \"./mongo\";\nimport { util, z } from \"zod\";\nimport { serve } from \"@hono/node-server\";\nimport { Hono } from \"hono\";\nimport { EsormQuery, EsormQueryOptions } from \"./query\";\nimport { inspect } from \"util\";\nimport { createId } from \"@paralleldrive/cuid2\";\nimport { EsormOperation } from \"./operation\";\n\ntype EsormPropertyType = \"string\" | \"number\" | \"boolean\";\ntype EsormProperty = { schema: z.ZodTypeAny };\ntype EsormPropertiesDefinition = Record<string, EsormProperty>;\n\nexport type EsormSchemaDefinition = Record<\n  string,\n  {\n    relations: {};\n    properties: EsormPropertiesDefinition;\n  }\n>;\n\nexport const Esorm = async <T extends EsormSchemaDefinition>(params: { port: number; mongodb_db: string; mongodb_url: string; schema: T }) => {\n  const client = await createMongoDBClient(params.mongodb_url);\n  const db = client.db(params.mongodb_db);\n\n  const session = await client.startSession();\n\n  type CollectionKey = keyof T & string;\n\n  type SchemaType = T;\n  type EntityType<K extends keyof SchemaType> = Partial<{ [P in keyof SchemaType[K][\"properties\"]]: z.infer<SchemaType[K][\"properties\"][P][\"schema\"]> }>;\n  type FinalType = { [Key in keyof SchemaType]: EntityType<Key> };\n\n  const result = {\n    start: () => {\n      const app = new Hono();\n\n      app.post(`/api/entity`, async (c) => {\n        const body = await c.req.json();\n\n        console.log(\"REQ\", body);\n\n        const data = await (async () => {\n          if (body.action === \"get-many\") return await result.getMany(body);\n          if (body.action === \"create-one\") return await result.createEntity(body.type, body.data);\n        })();\n\n        return c.json({ data });\n      });\n\n      app.routes.forEach((route) => {\n        console.log(\"API ROUTE: \", route.method, route.path);\n      });\n\n      serve(\n        {\n          fetch: app.fetch,\n          port: params.port,\n        },\n        () => console.log(`ESORM server is running on port ${params.port}`),\n      );\n    },\n\n    createEntity: async <K extends keyof T & string>(type: K, obj: EntityType<K>) => {\n      await result.apply_operation({\n        operation: \"create\",\n        type,\n        id: createId(),\n        data: obj,\n      });\n    },\n    getOne: async (type: CollectionKey, id: string) => {\n      return await db.collection(type).findOne({ _id: id as any });\n    },\n    getMany: async (query: EsormQueryOptions) => {\n      const serialize = (target: any, condition?: EsormQuery) => {\n        if (condition === undefined) return target;\n\n        if (condition.operator === \"and\") target[\"$and\"] = condition.conditions.map((x) => serialize({}, x));\n        else if (condition.operator === \"or\") target[\"$or\"] = condition.conditions.map((x) => serialize({}, x));\n        else if (condition.operator === \"=\") target[condition.column] = { $eq: condition.value };\n        else if (condition.operator === \"!=\") target[condition.column] = { $not: { $eq: condition.value } };\n        else if (condition.operator === \"in\") target[condition.column] = { $in: condition.value };\n\n        return target;\n      };\n\n      const filter = serialize({}, query.query);\n\n      console.log(inspect(filter, { showHidden: false, depth: null, colors: true }));\n\n      return await db.collection(query.type).find(filter).toArray();\n    },\n\n    apply_operation: async (operation: EsormOperation) => {\n      if (operation.operation === \"create\") {\n        await db.collection(operation.type).insertOne({ ...operation.data, _id: operation.id as any });\n      }\n\n      if (operation.operation === \"update\") {\n        await db.collection(operation.type).updateOne(\n          { _id: operation.id as any },\n          {\n            $set: { [operation.column]: operation.value },\n          },\n        );\n      }\n\n      if (operation.operation === \"delete\") {\n        await db.collection(operation.type).deleteOne({ _id: operation.id as any });\n      }\n    },\n    apply_operations: async (operations: EsormOperation[]) => {\n      // TODO: This can be massively optimized by batching operations into three builk insert, update, and delete operations.\n\n      await session.withTransaction(async () => {\n        for (const operation of operations) {\n          await result.apply_operation(operation);\n        }\n      });\n    },\n\n    _SCHEMATYPE: undefined as T,\n  };\n\n  return result;\n};\n\nexport const EsormTypes = {\n  string: { schema: z.string() },\n  number: { schema: z.number() },\n  boolean: { schema: z.boolean() },\n};\n","export type EsormQueryOperator = \"=\" | \"in\" | \"<\" | \"<=\" | \">\" | \">=\" | \"!=\";\nexport type EsormQueryCondition = {\n  operator: EsormQueryOperator;\n  column: string;\n  value: any;\n};\nexport type EsormQuery =\n  | undefined\n  | EsormQueryCondition\n  | {\n      operator: \"and\";\n      conditions: EsormQuery[];\n    }\n  | {\n      operator: \"or\";\n      conditions: EsormQuery[];\n    };\n\nexport type EsormQueryOptions = {\n  type: string;\n  query?: EsormQuery;\n  sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n  limit?: number;\n  offset?: number;\n};\n\nexport const EsormQueryBuilder = {\n  where: (column: string, operator: EsormQueryOperator, value: any) => {\n    const condition: EsormQueryCondition = {\n      operator,\n      column,\n      value,\n    };\n\n    return condition;\n  },\n  and: (...conditions: EsormQuery[]) => ({ operator: \"and\" as const, conditions }),\n  or: (...conditions: EsormQuery[]) => ({ operator: \"or\" as const, conditions }),\n};\n","import { z } from \"zod\";\nimport { EsormSchemaDefinition } from \"./v2\";\nimport { EsormQuery, EsormQueryBuilder } from \"./query\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { createEffect, onCleanup } from \"solid-js\";\nimport { EsormOperation } from \"./operation\";\n\nexport const EsormClient = <R extends { _SCHEMATYPE: EsormSchemaDefinition }>() => {\n  type SchemaType = R[\"_SCHEMATYPE\"];\n  type BaseType = { _id: string };\n  type EntityType<K extends keyof SchemaType> = BaseType &\n    Partial<{ [P in keyof SchemaType[K][\"properties\"]]: z.infer<SchemaType[K][\"properties\"][P][\"schema\"]> }>;\n  type FinalType = { [Key in keyof SchemaType]: EntityType<Key> };\n\n  const req = async (body: any) => {\n    const response = await fetch(\"/api/entity\", {\n      method: \"post\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify(body),\n    });\n\n    if (response.ok) {\n      const json = await response.json();\n\n      return (json as any).data as unknown;\n    }\n  };\n\n  const cache = {\n    operationsCommitting: [] as EsormOperation[], // Operations that are local that are being committed\n    operationsLocal: [] as EsormOperation[], // Operations that are local that are not yet being committed\n  };\n\n  const update = async () => {\n    if (cache.operationsLocal.length) {\n      console.log(\"Pushing Updates...\");\n\n      cache.operationsCommitting = cache.operationsLocal;\n      cache.operationsLocal = [];\n\n      await req({\n        operation: \"operations\",\n        operations: cache.operationsCommitting,\n      });\n    }\n\n    setTimeout(update, 1000);\n  };\n\n  update();\n\n  const client = {\n    createOne: async <Key extends keyof SchemaType>(type: Key, data: EntityType<Key>) => {\n      const response = await fetch(\"/api/entity\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          action: \"create-one\",\n          type,\n          data,\n        }),\n      });\n\n      if (response.ok) {\n        const json = await response.json();\n\n        return (json as any).data as FinalType[Key][];\n      }\n    },\n    getMany: async <Key extends keyof FinalType>(options: {\n      type: Key;\n      query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n      sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n      limit?: number;\n      offset?: number;\n    }) => {\n      const response = await fetch(\"/api/entity\", {\n        method: \"post\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({\n          action: \"get-many\",\n          type: options.type,\n          query: options.query?.(EsormQueryBuilder),\n          sort: options.sort,\n          limit: options.limit,\n          offset: options.offset,\n        }),\n      });\n\n      if (response.ok) {\n        const json = await response.json();\n\n        return (json as any).data as FinalType[Key][];\n      }\n    },\n\n    createQuery: <Key extends keyof FinalType>(\n      options: () => {\n        type: Key;\n        query?: (qb: typeof EsormQueryBuilder) => EsormQuery;\n        sort?: string | [string, \"asc\" | \"desc\"] | [string, \"asc\" | \"desc\"][];\n        limit?: number;\n        offset?: number;\n      },\n    ) => {\n      const state = makeAutoObservable({\n        isLoading: true,\n        isError: false,\n        data: [] as EntityType<Key>[],\n\n        success: (data: EntityType<Key>[]) => {\n          console.log(\"QUERY SUCCESS\");\n\n          state.isLoading = false;\n          state.isError = false;\n          state.data = data;\n        },\n        error: () => {\n          state.isLoading = false;\n          state.isError = true;\n        },\n      });\n\n      createEffect(async () => {\n        let isCurrent = true;\n\n        onCleanup(() => (isCurrent = false));\n\n        const o = options();\n\n        const result = await client.getMany(o);\n\n        if (o.limit) {\n          state.success(result.slice(0, o.limit));\n        } else {\n          state.success(result);\n        }\n      });\n\n      return state;\n    },\n\n    setEntityValue: <Key extends keyof SchemaType & string, K extends keyof EntityType<Key> & string>(\n      type: Key,\n      target: EntityType<Key>,\n      key: K,\n      value: EntityType<Key>[K] | undefined,\n    ) => {\n      runInAction(() => {\n        target[key] = value;\n      });\n\n      cache.operationsLocal.push({\n        operation: \"update\",\n        type,\n        id: target._id,\n        column: key,\n        value,\n      });\n    },\n  };\n\n  return client;\n};\n\ntype EsormBatchOperation = {\n  create: Record<string, any>;\n  update: Record<string, any>;\n  delete: Record<string, any>;\n};\n","console.log(\"Hello ESORM\");\n\nexport const TestFunction = () => {\n  console.log(\"ESORM TEST\");\n};\n\nconsole.log(\"Arg 0\", process.argv[0]);\nconsole.log(\"Arg 1\", process.argv[1]);\nconsole.log(\"Arg 2\", process.argv[2]);\n\nexport * from \"./v2\";\nexport * from \"./client\";\n"],"mappings":"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","names":[]}