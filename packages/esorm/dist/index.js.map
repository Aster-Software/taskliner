{"version":3,"sources":["../src/index.ts","../src/query.ts","../src/object.ts","../src/router.ts"],"sourcesContent":["console.log(\"Hello ESORM\")\n\nexport const TestFunction = () => {\n    console.log(\"ESORM TEST\")\n}\n\nexport { EsormDatabase, EsormTable as EsormObject, EsormColumn } from \"./object\"\nexport { EsormRouter, EsormRoute } from \"./router\"\n","import { SelectQueryBuilder } from \"kysely\";\n\nexport type EsormQueryLine = {\n    operator: \"=\"\n    column: string;\n    value: any;\n} | {\n    operator: \"or\";\n    clauses: EsormQueryLine[];\n} | {\n    operator: \"and\",\n    clauses: EsormQueryLine[];\n};\n\n// TODO: Add support for arrays of query lines\nexport type EsormQuery = void | EsormQueryLine; // EsormQueryLine | EsormQueryLine[];\n\n// TODO: Add support for AND operators\n// TODO: Add support for OR operators\nexport const applyEsormQueryToQB = <T extends SelectQueryBuilder<any, any, any>>(qb: T, query: EsormQuery) => {\n    if (query) {\n        if (query.operator === \"=\") {\n            qb.where(query.column, query.operator, query.value)\n        }\n    }\n    \n    return qb;\n}","import { DatabaseConnection, Insertable, Kysely, Selectable, isKyselyProps } from \"kysely\";\nimport { EsormQuery, applyEsormQueryToQB } from \"./query\";\n\ntype BaseEsormObject = {\n    id: string;\n    created: string;\n    updated: string;\n}\n\ntype EsormObjectType = \"string\" | \"number\" | \"boolean\" | \"json\";\n\ntype RoutesConfig<DB> = Partial<{ [Key in keyof DB & string]: {} }>;\n\ntype RouteOutputConfig = {\n    path: string;\n    validator: (input: unknown) => unknown,\n    handler: (input: unknown) => unknown,\n}\n\nexport class EsormDatabase<KKDB> {\n    connection: Kysely<KKDB>;\n    routes: RoutesConfig<KKDB>;\n\n    constructor(options: {\n        connection: Kysely<KKDB>,\n        routes: RoutesConfig<KKDB>,\n    }) {\n        this.connection = options.connection,\n        this.routes = options.routes;\n    }\n\n    async getOne<K extends keyof KKDB & string>(key: K, query: EsormQuery) {\n        const qb = this.connection.selectFrom(key).selectAll()\n\n        applyEsormQueryToQB(qb, query);\n\n        return qb.executeTakeFirstOrThrow();\n    }\n\n    async getMany<K extends keyof KKDB & string>(key: K, query: EsormQuery) {\n        const qb = this.connection.selectFrom(key).selectAll()\n\n        applyEsormQueryToQB(qb, query);\n\n        return qb.execute();\n    }\n    \n    async insert<K extends keyof KKDB & string>(key: K, objects: Insertable<KKDB[K]>[]) {\n        await this.connection.insertInto(key).values(objects).execute();\n    }\n\n    async delete<K extends keyof KKDB & string>(key: K, objects: Insertable<KKDB[K]>) {\n        // await this.connection.deleteFrom(key)\n    }\n\n    getRoutes(): RouteOutputConfig[] {\n        return Object.entries(this.routes).map(([key, config]) => ({\n            path: `/${key}/get-many`,\n            validator: (input: unknown) => input,\n            handler: (query: EsormQuery) => this.getMany(key as any),\n        }))\n    }\n}\n\nexport class EsormTable<T extends { [key: string]: EsormColumn<any> }> {\n    name: string;\n    columns: T\n\n    constructor(options: {\n        name: string;\n        columns: T,\n    }) {\n        this.name = options.name;\n        this.columns = options.columns;\n}\n\n    async getOne(query: EsormQuery) {\n        // const qb = \n    }\n}\n\nexport class EsormColumn<T extends EsormObjectType> {\n    type: EsormObjectType\n\n    constructor(type: EsormObjectType) {\n        this.type = type;\n    }\n}","export class EsormRoute<T> {\n    constructor() {\n        \n    }\n};\n\nexport class EsormRouter<T> {\n\n}"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACmBO,IAAM,sBAAsB,CAA8C,IAAO,UAAsB;AAC1G,MAAI,OAAO;AACP,QAAI,MAAM,aAAa,KAAK;AACxB,SAAG,MAAM,MAAM,QAAQ,MAAM,UAAU,MAAM,KAAK;AAAA,IACtD;AAAA,EACJ;AAEA,SAAO;AACX;;;ACRO,IAAM,gBAAN,MAA0B;AAAA,EAC7B;AAAA,EACA;AAAA,EAEA,YAAY,SAGT;AACC,SAAK,aAAa,QAAQ,YAC1B,KAAK,SAAS,QAAQ;AAAA,EAC1B;AAAA,EAEA,MAAM,OAAsC,KAAQ,OAAmB;AACnE,UAAM,KAAK,KAAK,WAAW,WAAW,GAAG,EAAE,UAAU;AAErD,wBAAoB,IAAI,KAAK;AAE7B,WAAO,GAAG,wBAAwB;AAAA,EACtC;AAAA,EAEA,MAAM,QAAuC,KAAQ,OAAmB;AACpE,UAAM,KAAK,KAAK,WAAW,WAAW,GAAG,EAAE,UAAU;AAErD,wBAAoB,IAAI,KAAK;AAE7B,WAAO,GAAG,QAAQ;AAAA,EACtB;AAAA,EAEA,MAAM,OAAsC,KAAQ,SAAgC;AAChF,UAAM,KAAK,WAAW,WAAW,GAAG,EAAE,OAAO,OAAO,EAAE,QAAQ;AAAA,EAClE;AAAA,EAEA,MAAM,OAAsC,KAAQ,SAA8B;AAAA,EAElF;AAAA,EAEA,YAAiC;AAC7B,WAAO,OAAO,QAAQ,KAAK,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,MAAM,OAAO;AAAA,MACvD,MAAM,IAAI,GAAG;AAAA,MACb,WAAW,CAAC,UAAmB;AAAA,MAC/B,SAAS,CAAC,UAAsB,KAAK,QAAQ,GAAU;AAAA,IAC3D,EAAE;AAAA,EACN;AACJ;AAEO,IAAM,aAAN,MAAgE;AAAA,EACnE;AAAA,EACA;AAAA,EAEA,YAAY,SAGT;AACC,SAAK,OAAO,QAAQ;AACpB,SAAK,UAAU,QAAQ;AAAA,EAC/B;AAAA,EAEI,MAAM,OAAO,OAAmB;AAAA,EAEhC;AACJ;AAEO,IAAM,cAAN,MAA6C;AAAA,EAChD;AAAA,EAEA,YAAY,MAAuB;AAC/B,SAAK,OAAO;AAAA,EAChB;AACJ;;;ACvFO,IAAM,aAAN,MAAoB;AAAA,EACvB,cAAc;AAAA,EAEd;AACJ;AAEO,IAAM,cAAN,MAAqB;AAE5B;;;AHRA,QAAQ,IAAI,aAAa;AAElB,IAAM,eAAe,MAAM;AAC9B,UAAQ,IAAI,YAAY;AAC5B;","names":[]}