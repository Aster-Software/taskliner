{"version":3,"sources":["../src/index.ts","../src/query.ts","../src/object.ts","../src/router.ts","../src/esorm.ts"],"sourcesContent":["console.log(\"Hello ESORM\");\n\nexport const TestFunction = () => {\n  console.log(\"ESORM TEST\");\n};\n\nexport { EsormDatabase, EsormTable as EsormObject, EsormColumn } from \"./object\";\nexport { EsormRouter, EsormRoute } from \"./router\";\nexport { Esorm } from \"./esorm\";\n\nconsole.log(\"Arg 0\", process.argv[0]);\nconsole.log(\"Arg 1\", process.argv[1]);\nconsole.log(\"Arg 2\", process.argv[2]);\n","import { SelectQueryBuilder } from \"kysely\";\n\nexport type EsormQueryLine = {\n    operator: \"=\"\n    column: string;\n    value: any;\n} | {\n    operator: \"or\";\n    clauses: EsormQueryLine[];\n} | {\n    operator: \"and\",\n    clauses: EsormQueryLine[];\n};\n\n// TODO: Add support for arrays of query lines\nexport type EsormQuery = void | EsormQueryLine; // EsormQueryLine | EsormQueryLine[];\n\n// TODO: Add support for AND operators\n// TODO: Add support for OR operators\nexport const applyEsormQueryToQB = <T extends SelectQueryBuilder<any, any, any>>(qb: T, query: EsormQuery) => {\n    if (query) {\n        if (query.operator === \"=\") {\n            qb.where(query.column, query.operator, query.value)\n        }\n    }\n    \n    return qb;\n}","import { DatabaseConnection, Insertable, Kysely, Selectable, isKyselyProps } from \"kysely\";\nimport { EsormQuery, applyEsormQueryToQB } from \"./query\";\nimport { z } from \"zod\";\n\ntype EsormColumnType = |\n\"int4\" |\n\"int8\" |\n\"float4\" |\n\"float8\" |\n\"bool\" |\n\"text\" |\n\"timestamptz\"\n\ntype RoutesConfig<DB> = Partial<{ [Key in keyof DB & string]: {} }>;\n\ntype RouteOutputConfig = {\n    path: string;\n    validator: (input: unknown) => unknown,\n    handler: (input: unknown) => unknown,\n}\n\nexport class EsormDatabase<KKDB> {\n    connection: Kysely<KKDB>;\n    routes: RoutesConfig<KKDB>;\n\n    constructor(options: {\n        connection: Kysely<KKDB>,\n        routes: RoutesConfig<KKDB>,\n    }) {\n        this.connection = options.connection,\n        this.routes = options.routes;\n    }\n\n    async getOne<K extends keyof KKDB & string>(key: K, query: EsormQuery) {\n        const qb = this.connection.selectFrom(key).selectAll()\n\n        applyEsormQueryToQB(qb, query);\n\n        return qb.executeTakeFirstOrThrow();\n    }\n\n    async getMany<K extends keyof KKDB & string>(key: K, query: EsormQuery) {\n        const qb = this.connection.selectFrom(key).selectAll()\n\n        applyEsormQueryToQB(qb, query);\n\n        return qb.execute();\n    }\n    \n    async insert<K extends keyof KKDB & string>(key: K, objects: Insertable<KKDB[K]>[]) {\n        await this.connection.insertInto(key).values(objects).execute();\n    }\n\n    async delete<K extends keyof KKDB & string>(key: K, objects: Insertable<KKDB[K]>) {\n        // await this.connection.deleteFrom(key)\n    }\n\n    getRoutes(): RouteOutputConfig[] {\n        return Object.entries(this.routes).map(([key, config]) => ({\n            path: `/${key}/get-many`,\n            validator: (input: unknown) => input,\n            handler: (query: EsormQuery) => this.getMany(key as any),\n        }))\n    }\n}\n\nexport class EsormTable<T extends { [key: string]: EsormColumn<any> }> {\n    name: string;\n    columns: T\n\n    constructor(options: {\n        name: string;\n        columns: T,\n    }) {\n        this.name = options.name;\n        this.columns = options.columns;\n}\n\n    async getOne(query: EsormQuery) {\n        // const qb = \n    }\n}\n\nexport class EsormColumn<T extends EsormColumnType> {\n    type: EsormColumnType\n    validator: typeof EsormColumnType[T][\"validator\"];\n\n    constructor(type: T) {\n        this.type = type;\n        this.validator = EsormColumnType[type].validator;\n    }\n}\n\nexport const EsormColumnType = {\n    int4: { validator: z.number().int() },\n    int8: { validator: z.number().int() },\n    float4: { validator: z.number().int() },\n    float8: { validator: z.number().int() },\n    bool: { validator: z.boolean() },\n    text: { validator: z.string() },\n    timestamptz: { validator: z.string().datetime() }\n} satisfies Record<EsormColumnType, { validator: z.ZodTypeAny }>;\n\n// Related Items\n// Found using connected IDs.","import { Hono } from \"hono\";\nimport { EsormDatabase } from \"./object\";\n\nexport class EsormRoute<T> {\n    constructor() {\n        \n    }\n};\n\nexport class EsormRouter<DB> {\n    app: Hono\n    db: EsormDatabase<DB>\n\n    constructor(options: {\n        db: EsormDatabase<DB>,\n    }) {\n        this.app = new Hono();\n        this.db = options.db;\n\n        Object.entries(this.db.routes).forEach(([key, path]) => {\n            this.app.post(`/${key}/get-many`, (c) => {\n                const input = c.req.json();\n                const result = this.db.getMany(key as any, input as any);\n\n                return c.json({\n                    data: result,\n                });\n            })\n        });\n    }\n}\n\n","import { createId } from \"@paralleldrive/cuid2\";\nimport type { ColumnType, KyselyProps } from \"kysely\";\nimport { Kysely, KyselyConfig } from \"kysely\";\n\ntype EsormColumnType = \"int4\" | \"int8\" | \"bool\" | \"float4\" | \"float8\" | \"text\" | \"jsonb\";\ntype EsormColumn = { type: EsormColumnType; references?: string; onDelete?: \"CASCADE\" | \"SET NULL\" };\ntype EsormPropertiesDefinition = Record<string, EsormColumn>;\ntype EsormSchemaDefinition = Record<\n  string,\n  {\n    relations: {};\n    properties: EsormPropertiesDefinition;\n  }\n>;\n\nexport const Esorm = <T extends EsormSchemaDefinition>(schema: T, connection: Kysely<any>) => {\n  type DB = {\n    [Key in keyof T]: {\n      id: string;\n      created: number;\n      updated: number;\n      data: Generated<Json>;\n    };\n  };\n\n  type Operation =\n    | {\n        operation: \"delete\";\n        type: keyof DB & string;\n        id: string;\n      }\n    | {\n        operation: \"create\";\n        type: keyof DB & string;\n        id: string;\n      }\n    | {\n        operation: \"update\";\n        type: keyof DB & string;\n        id: string;\n        path: string[];\n        value: any;\n      };\n\n  const db = connection as Kysely<DB>;\n\n  const result = {\n    db,\n    schema,\n\n    get: async <K extends keyof T & string>(type: K) => {\n      return await db.selectFrom(type).selectAll().orderBy(\"created\").execute();\n    },\n    create: async <K extends keyof T & string>(type: K, data: any) => {\n      const record: any = {\n        id: createId(),\n        created: Date.now(),\n        updated: Date.now(),\n        data,\n      };\n\n      await db.insertInto(type).values([record]).execute();\n    },\n\n    /** Apply one operation */\n    apply_operation: async (db: Kysely<DB>, operation: Operation) => {\n      console.log(\"APPLY\", operation);\n\n      if (operation.operation === \"create\") {\n        const record: any = {\n          id: operation.id,\n          created: Date.now(),\n          updated: Date.now(),\n          data: {},\n        };\n\n        await db.insertInto(operation.type).values([record]).execute();\n      }\n\n      if (operation.operation === \"delete\") {\n        await db\n          .deleteFrom(operation.type)\n          .where(\"id\", \"=\", operation.id as any)\n          .executeTakeFirst();\n      }\n\n      if (operation.operation === \"update\") {\n        if (operation.path.length === 0) return;\n\n        const item: any = await db\n          .selectFrom(operation.type)\n          .where(\"id\", \"=\", operation.id as any)\n          .select(\"data\")\n          .executeTakeFirstOrThrow();\n\n        let current = item.data;\n        let p = operation.path.slice(1);\n        let k = operation.path.at(-1);\n\n        for (const key of p) {\n          current = typeof current === \"object\" ? current[key] : undefined;\n        }\n\n        if (typeof current === \"object\") {\n          current[k] = operation.value;\n        }\n\n        await db\n          .updateTable(operation.type)\n          .where(\"id\", \"=\", operation.id as any)\n          .set(\"data\", item.data)\n          .execute();\n      }\n\n      return;\n    },\n\n    /** Apply many operations */\n    apply_operations: async (operations: Operation[]) => {\n      await db.transaction().execute(async (db) => {\n        for (const operation of operations) {\n          await result.apply_operation(db, operation);\n        }\n      });\n    },\n\n    _type_db: undefined as DB,\n    _type_schema: undefined as T,\n  };\n\n  return result;\n};\n\nexport type EsormDatabaseType<T extends ReturnType<typeof Esorm<any>>> = T[\"_type_db\"];\nexport type EsormSchemaType<T extends ReturnType<typeof Esorm<any>>> = T[\"_type_schema\"];\n\n// ---\n\nexport type Generated<T> = T extends ColumnType<infer S, infer I, infer U> ? ColumnType<S, I | undefined, U> : ColumnType<T, T | undefined, T>;\n\nexport type Int8 = ColumnType<string, bigint | number | string, bigint | number | string>;\nexport type Json = JsonValue;\nexport type JsonArray = JsonValue[];\nexport type JsonObject = {\n  [K in string]?: JsonValue;\n};\nexport type JsonPrimitive = boolean | number | string | null;\nexport type JsonValue = JsonArray | JsonObject | JsonPrimitive;\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACmBO,IAAM,sBAAsB,CAA8C,IAAO,UAAsB;AAC1G,MAAI,OAAO;AACP,QAAI,MAAM,aAAa,KAAK;AACxB,SAAG,MAAM,MAAM,QAAQ,MAAM,UAAU,MAAM,KAAK;AAAA,IACtD;AAAA,EACJ;AAEA,SAAO;AACX;;;ACzBA,iBAAkB;AAmBX,IAAM,gBAAN,MAA0B;AAAA,EAC7B;AAAA,EACA;AAAA,EAEA,YAAY,SAGT;AACC,SAAK,aAAa,QAAQ,YAC1B,KAAK,SAAS,QAAQ;AAAA,EAC1B;AAAA,EAEA,MAAM,OAAsC,KAAQ,OAAmB;AACnE,UAAM,KAAK,KAAK,WAAW,WAAW,GAAG,EAAE,UAAU;AAErD,wBAAoB,IAAI,KAAK;AAE7B,WAAO,GAAG,wBAAwB;AAAA,EACtC;AAAA,EAEA,MAAM,QAAuC,KAAQ,OAAmB;AACpE,UAAM,KAAK,KAAK,WAAW,WAAW,GAAG,EAAE,UAAU;AAErD,wBAAoB,IAAI,KAAK;AAE7B,WAAO,GAAG,QAAQ;AAAA,EACtB;AAAA,EAEA,MAAM,OAAsC,KAAQ,SAAgC;AAChF,UAAM,KAAK,WAAW,WAAW,GAAG,EAAE,OAAO,OAAO,EAAE,QAAQ;AAAA,EAClE;AAAA,EAEA,MAAM,OAAsC,KAAQ,SAA8B;AAAA,EAElF;AAAA,EAEA,YAAiC;AAC7B,WAAO,OAAO,QAAQ,KAAK,MAAM,EAAE,IAAI,CAAC,CAAC,KAAK,MAAM,OAAO;AAAA,MACvD,MAAM,IAAI,GAAG;AAAA,MACb,WAAW,CAAC,UAAmB;AAAA,MAC/B,SAAS,CAAC,UAAsB,KAAK,QAAQ,GAAU;AAAA,IAC3D,EAAE;AAAA,EACN;AACJ;AAEO,IAAM,aAAN,MAAgE;AAAA,EACnE;AAAA,EACA;AAAA,EAEA,YAAY,SAGT;AACC,SAAK,OAAO,QAAQ;AACpB,SAAK,UAAU,QAAQ;AAAA,EAC/B;AAAA,EAEI,MAAM,OAAO,OAAmB;AAAA,EAEhC;AACJ;AAEO,IAAM,cAAN,MAA6C;AAAA,EAChD;AAAA,EACA;AAAA,EAEA,YAAY,MAAS;AACjB,SAAK,OAAO;AACZ,SAAK,YAAY,gBAAgB,IAAI,EAAE;AAAA,EAC3C;AACJ;AAEO,IAAM,kBAAkB;AAAA,EAC3B,MAAM,EAAE,WAAW,aAAE,OAAO,EAAE,IAAI,EAAE;AAAA,EACpC,MAAM,EAAE,WAAW,aAAE,OAAO,EAAE,IAAI,EAAE;AAAA,EACpC,QAAQ,EAAE,WAAW,aAAE,OAAO,EAAE,IAAI,EAAE;AAAA,EACtC,QAAQ,EAAE,WAAW,aAAE,OAAO,EAAE,IAAI,EAAE;AAAA,EACtC,MAAM,EAAE,WAAW,aAAE,QAAQ,EAAE;AAAA,EAC/B,MAAM,EAAE,WAAW,aAAE,OAAO,EAAE;AAAA,EAC9B,aAAa,EAAE,WAAW,aAAE,OAAO,EAAE,SAAS,EAAE;AACpD;;;ACrGA,kBAAqB;AAGd,IAAM,aAAN,MAAoB;AAAA,EACvB,cAAc;AAAA,EAEd;AACJ;AAEO,IAAM,cAAN,MAAsB;AAAA,EACzB;AAAA,EACA;AAAA,EAEA,YAAY,SAET;AACC,SAAK,MAAM,IAAI,iBAAK;AACpB,SAAK,KAAK,QAAQ;AAElB,WAAO,QAAQ,KAAK,GAAG,MAAM,EAAE,QAAQ,CAAC,CAAC,KAAK,IAAI,MAAM;AACpD,WAAK,IAAI,KAAK,IAAI,GAAG,aAAa,CAAC,MAAM;AACrC,cAAM,QAAQ,EAAE,IAAI,KAAK;AACzB,cAAM,SAAS,KAAK,GAAG,QAAQ,KAAY,KAAY;AAEvD,eAAO,EAAE,KAAK;AAAA,UACV,MAAM;AAAA,QACV,CAAC;AAAA,MACL,CAAC;AAAA,IACL,CAAC;AAAA,EACL;AACJ;;;AC9BA,mBAAyB;AAelB,IAAM,QAAQ,CAAkC,QAAW,eAA4B;AA6B5F,QAAM,KAAK;AAEX,QAAM,SAAS;AAAA,IACb;AAAA,IACA;AAAA,IAEA,KAAK,OAAmC,SAAY;AAClD,aAAO,MAAM,GAAG,WAAW,IAAI,EAAE,UAAU,EAAE,QAAQ,SAAS,EAAE,QAAQ;AAAA,IAC1E;AAAA,IACA,QAAQ,OAAmC,MAAS,SAAc;AAChE,YAAM,SAAc;AAAA,QAClB,QAAI,uBAAS;AAAA,QACb,SAAS,KAAK,IAAI;AAAA,QAClB,SAAS,KAAK,IAAI;AAAA,QAClB;AAAA,MACF;AAEA,YAAM,GAAG,WAAW,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ;AAAA,IACrD;AAAA;AAAA,IAGA,iBAAiB,OAAOA,KAAgB,cAAyB;AAC/D,cAAQ,IAAI,SAAS,SAAS;AAE9B,UAAI,UAAU,cAAc,UAAU;AACpC,cAAM,SAAc;AAAA,UAClB,IAAI,UAAU;AAAA,UACd,SAAS,KAAK,IAAI;AAAA,UAClB,SAAS,KAAK,IAAI;AAAA,UAClB,MAAM,CAAC;AAAA,QACT;AAEA,cAAMA,IAAG,WAAW,UAAU,IAAI,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,QAAQ;AAAA,MAC/D;AAEA,UAAI,UAAU,cAAc,UAAU;AACpC,cAAMA,IACH,WAAW,UAAU,IAAI,EACzB,MAAM,MAAM,KAAK,UAAU,EAAS,EACpC,iBAAiB;AAAA,MACtB;AAEA,UAAI,UAAU,cAAc,UAAU;AACpC,YAAI,UAAU,KAAK,WAAW;AAAG;AAEjC,cAAM,OAAY,MAAMA,IACrB,WAAW,UAAU,IAAI,EACzB,MAAM,MAAM,KAAK,UAAU,EAAS,EACpC,OAAO,MAAM,EACb,wBAAwB;AAE3B,YAAI,UAAU,KAAK;AACnB,YAAI,IAAI,UAAU,KAAK,MAAM,CAAC;AAC9B,YAAI,IAAI,UAAU,KAAK,GAAG,EAAE;AAE5B,mBAAW,OAAO,GAAG;AACnB,oBAAU,OAAO,YAAY,WAAW,QAAQ,GAAG,IAAI;AAAA,QACzD;AAEA,YAAI,OAAO,YAAY,UAAU;AAC/B,kBAAQ,CAAC,IAAI,UAAU;AAAA,QACzB;AAEA,cAAMA,IACH,YAAY,UAAU,IAAI,EAC1B,MAAM,MAAM,KAAK,UAAU,EAAS,EACpC,IAAI,QAAQ,KAAK,IAAI,EACrB,QAAQ;AAAA,MACb;AAEA;AAAA,IACF;AAAA;AAAA,IAGA,kBAAkB,OAAO,eAA4B;AACnD,YAAM,GAAG,YAAY,EAAE,QAAQ,OAAOA,QAAO;AAC3C,mBAAW,aAAa,YAAY;AAClC,gBAAM,OAAO,gBAAgBA,KAAI,SAAS;AAAA,QAC5C;AAAA,MACF,CAAC;AAAA,IACH;AAAA,IAEA,UAAU;AAAA,IACV,cAAc;AAAA,EAChB;AAEA,SAAO;AACT;;;AJnIA,QAAQ,IAAI,aAAa;AAElB,IAAM,eAAe,MAAM;AAChC,UAAQ,IAAI,YAAY;AAC1B;AAMA,QAAQ,IAAI,SAAS,QAAQ,KAAK,CAAC,CAAC;AACpC,QAAQ,IAAI,SAAS,QAAQ,KAAK,CAAC,CAAC;AACpC,QAAQ,IAAI,SAAS,QAAQ,KAAK,CAAC,CAAC;","names":["db"]}