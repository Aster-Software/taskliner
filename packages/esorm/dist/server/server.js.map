{"version":3,"sources":["../../src/server/mongo.ts","../../src/server/server.ts","../../src/common/utils.ts","../../src/server/server-socket.ts","../../src/common/batch.ts","../../src/server/server-authorization.ts","../../src/server/server-watcher.ts","../../src/server/server-api.ts"],"sourcesContent":["import { createId } from \"@paralleldrive/cuid2\";\nimport { MongoClient, ObjectId, ServerApiVersion } from \"mongodb\";\n\n// Create a MongoClient with a MongoClientOptions object to set the Stable API version\n\nexport const createClient = async (url: string) => {\n  const client = new MongoClient(url, {\n    serverApi: {\n      version: ServerApiVersion.v1,\n      strict: true,\n      deprecationErrors: true,\n    },\n  });\n\n  // Connect the client to the server\t(optional starting in v4.7)\n  await client.connect();\n\n  // Send a ping to confirm a successful connection\n  await client.db(\"admin\").command({ ping: 1 });\n\n  console.log(\"Successfully connected to MongoDB\");\n\n  return client;\n};\n\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\n","import { createClient as createMongoDBClient } from \"./mongo\";\nimport { z } from \"zod\";\nimport { serve } from \"@hono/node-server\";\nimport { Hono } from \"hono\";\nimport { getCookie } from \"hono/cookie\";\nimport { inspect } from \"util\";\nimport { create2DSet } from \"../common/utils\";\nimport { ServerSocketModule } from \"./server-socket\";\nimport { ServerWatcherModule } from \"./server-watcher\";\nimport { EsormSchemaDefinition } from \"../common/schema\";\nimport { EsormServerApi } from \"./server-api\";\nimport { Authorization } from \"./server-authorization\";\n\nexport const Esorm = async <T extends EsormSchemaDefinition, XSession>(esormOptions: EsormOptions<T, XSession>) => {\n  const client = await createMongoDBClient(esormOptions.mongodb_url);\n  const session = await client.startSession();\n\n  const db = client.db(esormOptions.mongodb_db);\n  const api = new EsormServerApi({ db });\n\n  const result = {\n    db,\n    api,\n\n    start: () => {\n      const app = new Hono();\n\n      app.post(`/api/entity`, async (c) => {\n        const body = await c.req.json();\n\n        console.log(\"REQ\");\n\n        log(body);\n\n        const token = getCookie(c, \"__session\") ?? \"\";\n        const session = await esormOptions.authenticate(token);\n        const authorization = await esormOptions.authorize(session, api);\n\n        const data = await (async () => {\n          if (body.action === \"get-many\") return await api.getManyWithAuthorization(body, authorization);\n          if (body.action === \"apply-operation\") return await api.applyBatchOperationWithAuthorization(body.operations, authorization);\n        })();\n\n        return c.json({ data });\n      });\n\n      app.routes.forEach((route) => {\n        console.log(\"API ROUTE: \", route.method, route.path);\n      });\n\n      serve(\n        {\n          fetch: app.fetch,\n          port: esormOptions.port,\n        },\n        () => console.log(`ESORM server is running on port ${esormOptions.port}`),\n      );\n\n      const watcher = new ServerWatcherModule({ db });\n      const socketModule = new ServerSocketModule({ db, watcher, esormOptions, api });\n    },\n\n    _SCHEMATYPE: undefined as T,\n  };\n\n  return result;\n};\n\nexport const EsormTypes = {\n  string: { schema: z.string() },\n  number: { schema: z.number() },\n  boolean: { schema: z.boolean() },\n};\n\nconst log = (x) => console.log(inspect(x, { showHidden: false, depth: null, colors: true }));\n\nconst createPubSubManager = <T extends Record<string, any>>() => {\n  const subscriptions = create2DSet();\n\n  return {\n    emit: <Key extends keyof T & string>(e: Key, args: T[Key]) => {\n      subscriptions.values(e).forEach((fn) => fn(args));\n    },\n    subscribe: <Key extends keyof T & string>(e: Key, callback: (args: T[Key]) => {}) => {\n      const obj = [e, callback];\n\n      subscriptions.add(e, obj);\n\n      return () => subscriptions.delete(e, obj);\n    },\n  };\n};\n\nexport type EsormOptions<T extends EsormSchemaDefinition, XSession> = {\n  port: number;\n  mongodb_db: string;\n  mongodb_url: string;\n  schema: T;\n  authenticate: (token: string) => Promise<XSession>;\n  authorize: (session: XSession, api: EsormServerApi<T>) => Promise<Authorization<T>>;\n};\n","export const deterministicStringify = (input: any) => {\n  const deterministicReplacer = (_, v) =>\n    typeof v !== \"object\" || v === null || Array.isArray(v) ? v : Object.fromEntries(Object.entries(v).sort(([ka], [kb]) => (ka < kb ? -1 : ka > kb ? 1 : 0)));\n\n  return JSON.stringify(input, deterministicReplacer);\n};\n\nexport const create2DSet = () => {\n  const map = {} as Record<string, Set<any>>;\n\n  return {\n    values: (scope: string) => [...(map[scope] ?? [])],\n    add: (scope: string, obj: any) => {\n      if (map[scope] === undefined) map[scope] = new Set();\n\n      map[scope].add(obj);\n    },\n    delete: (scope: string, obj: any) => {\n      if (map[scope] === undefined) map[scope] = new Set();\n\n      map[scope].delete(obj);\n    },\n  };\n};\n\nexport const create2DRecord = <T>() => {\n  const map = {} as Record<string, Record<string, T>>;\n\n  return {\n    values: (scope: string) => Object.values(map[scope]),\n    add: (scope: string, key: string, obj: T) => {\n      if (map[scope] === undefined) map[scope] = {};\n\n      map[scope][key] = obj;\n    },\n    delete: (scope: string, key: string) => {\n      if (map[scope] === undefined) map[scope] = {};\n\n      delete map[scope][key];\n    },\n  };\n};\n","import { WebSocketServer } from \"ws\";\nimport { EsormQuery } from \"../common/query\";\nimport { create2DRecord, deterministicStringify } from \"../common/utils\";\nimport { createBatchOperationRecord } from \"../common/batch\";\nimport { Db } from \"mongodb\";\nimport { ServerWatcherModule } from \"./server-watcher\";\nimport { EsormSchemaDefinition } from \"../common/schema\";\nimport { EsormOptions } from \"./server\";\nimport { EsormServerApi } from \"./server-api\";\nimport { authorizeEntityForPermission } from \"./server-authorization\";\n\nexport class ServerSocketModule<T extends EsormSchemaDefinition, XSession> {\n  options: ServerSocketModuleOptions<T, XSession>;\n  wss: WebSocketServer;\n\n  constructor(options: ServerSocketModuleOptions<T, XSession>) {\n    this.options = options;\n\n    this.wss = new WebSocketServer(\n      {\n        port: 8080,\n      },\n      () => {\n        console.log(\"Websocket server started on port 8080\");\n      },\n    );\n\n    this.wss.on(\"connection\", async (ws, req) => {\n      const getAuthorization = async (r: typeof req) => {\n        const cookies = req.headers.cookie.split(\";\").map((x) => x.trim());\n        const token = (cookies.find((x) => x.startsWith(\"__session=\")) ?? \"\").slice(10);\n        const session = await options.esormOptions.authenticate(token);\n        const authorization = await options.esormOptions.authorize(session, this.options.api);\n\n        return authorization;\n      };\n\n      const state = {\n        subscriptions: create2DRecord<EsormQuery>(),\n        updates: createBatchOperationRecord(),\n        disposers: [] as (() => void)[],\n        authorization: await getAuthorization(req),\n      };\n\n      const send = (action, data) => {\n        const json = JSON.stringify({ action, data });\n\n        ws.send(json);\n      };\n\n      const dispose = this.options.watcher.subscribe(async (action, payload) => {\n        const isAuthorized = authorizeEntityForPermission(\"read\", payload.document, state.authorization[payload.collection]);\n\n        if (isAuthorized) {\n          const patch = createBatchOperationRecord();\n\n          patch.types[payload.collection] = {\n            [payload.document._id]: {\n              action,\n              data: payload.document,\n            },\n          };\n\n          send(\"patch\", patch);\n        }\n      });\n\n      ws.on(\"message\", async (data, req) => {\n        const json = JSON.parse(data.toString());\n\n        console.log(\"MESSAGE\", json);\n\n        if (json.action === \"subscribe\") {\n          const key = deterministicStringify(json.data.query);\n\n          console.log(\"WS: Subscribe\", key);\n\n          state.subscriptions.add(json.data.type, key, json.data.query);\n        }\n\n        if (json.action === \"unsubscribe\") {\n          const key = deterministicStringify(json.data.query);\n\n          console.log(\"WS: Unsubscribe\", key);\n\n          state.subscriptions.delete(json.data.type, key);\n        }\n      });\n\n      ws.on(\"close\", () => {\n        dispose();\n      });\n\n      ws.on(\"error\", console.error);\n\n      ws.send(JSON.stringify({ type: \"Hello World\" }));\n    });\n  }\n}\n\ntype ServerSocketModuleOptions<T extends EsormSchemaDefinition, XSession> = {\n  db: Db;\n  api: EsormServerApi<T>;\n  watcher: ServerWatcherModule;\n\n  esormOptions: EsormOptions<T, XSession>;\n};\n","import merge from \"merge\";\n\nexport const createBatchOperationRecord = () => {\n  const operation: EsormBatchOperation = {\n    types: {},\n  };\n\n  return operation;\n};\n\nexport const appendBatchOperationRecord = (target: EsormBatchOperation, update: EsormBatchOperation) => {\n  merge.recursive(target, update);\n};\n\nexport const checkDoesBatchOperationRecordHaveChanges = (operation: EsormBatchOperation) => {\n  return Object.keys(operation.types).length > 0;\n};\n\nexport type EsormBatchOperation = {\n  types: Record<\n    string,\n    Record<\n      string,\n      {\n        action: \"create\" | \"update\" | \"delete\";\n        data: any;\n      }\n    >\n  >;\n};\n","import { EsormSchemaDefinition } from \"../common/schema\";\n\ntype Action = \"read\" | \"create\" | \"update\" | \"delete\";\n\nexport type Permission = {\n  action: \"all\" | Action;\n  scope?: Record<string, any>;\n  fields?: string[];\n};\n\nexport type Authorization<T extends EsormSchemaDefinition> = {\n  [Key in keyof T]: Permission | Permission[];\n};\n\nexport const authorizeEntityForPermission = (action: Action, entity: any, permissions: Permission | Permission[]) => {\n  const p = Array.isArray(permissions) ? permissions : [permissions];\n\n  return p.some((permission) => {\n    const isCorrectAction = permission.action === \"all\" || permission.action === action;\n\n    if (isCorrectAction === false) return false;\n\n    const isCorrectScope = Object.entries(permission.scope).every(([key, value]) => entity[key] === value);\n\n    return isCorrectScope;\n  });\n};\n","import { Db } from \"mongodb\";\n\nexport class ServerWatcherModule {\n  options: ServerWatcherModuleOptions;\n  listeners = new Set<ServerWatcherModuleListener>();\n\n  constructor(options: ServerWatcherModuleOptions) {\n    this.options = options;\n\n    this.options.db.watch([], { fullDocument: \"updateLookup\" }).on(\"change\", (e) => {\n      const ee = e as any; // Be free, little birdy (event)\n      const payload = { db: ee.ns.db, collection: ee.ns.coll, document: ee.fullDocument };\n\n      if (e.operationType === \"create\") this.listeners.forEach((l) => l(\"create\", payload));\n      if (e.operationType === \"update\") this.listeners.forEach((l) => l(\"update\", payload));\n      if (e.operationType === \"delete\") this.listeners.forEach((l) => l(\"delete\", payload));\n    });\n  }\n\n  subscribe(listener: ServerWatcherModuleListener) {\n    this.listeners.add(listener);\n\n    return () => this.listeners.delete(listener);\n  }\n}\n\ntype ServerWatcherModuleOptions = {\n  db: Db;\n};\n\ntype ServerWatcherModuleListener = (action: \"create\" | \"update\" | \"delete\", change: { db: string; collection: string; document: any }) => void;\n","import { Db } from \"mongodb\";\nimport { EsormSchemaDefinition } from \"../common/schema\";\nimport { EsormQuery, EsormQueryOptions } from \"../common/query\";\nimport { Authorization, authorizeEntityForPermission } from \"./server-authorization\";\nimport { EsormBatchOperation } from \"../common/batch\";\n\nexport class EsormServerApi<T extends EsormSchemaDefinition> {\n  options: EsormServerApiOptions;\n\n  constructor(options: EsormServerApiOptions) {\n    this.options = options;\n  }\n\n  getMany = async (query: EsormQueryOptions) => {\n    const serialize = (target: any, condition?: EsormQuery) => {\n      if (condition === undefined) return target;\n\n      if (condition.operator === \"and\") target[\"$and\"] = condition.conditions.map((x) => serialize({}, x));\n      else if (condition.operator === \"or\") target[\"$or\"] = condition.conditions.map((x) => serialize({}, x));\n      else if (condition.operator === \"=\") target[condition.column] = { $eq: condition.value };\n      else if (condition.operator === \"!=\") target[condition.column] = { $not: { $eq: condition.value } };\n      else if (condition.operator === \"in\") target[condition.column] = { $in: condition.value };\n\n      return target;\n    };\n\n    const filter = serialize({}, query.query);\n\n    const items = await this.options.db.collection(query.type).find(filter).limit(10000).toArray();\n\n    return items;\n  };\n\n  getManyWithAuthorization = async (query: EsormQueryOptions, authorization: Authorization<T>) => {\n    const items = await this.getMany(query);\n\n    const permissions = authorization[query.type];\n\n    return items.filter((item) => authorizeEntityForPermission(\"read\", item, permissions));\n  };\n\n  applyBatchOperation = async (operation: EsormBatchOperation) => {\n    console.log(\"Applying Operations...\");\n\n    for (const type in operation.types) {\n      const t = operation.types[type];\n\n      for (const [id, entry] of Object.entries(t)) {\n        if (entry.action === \"create\") {\n          await this.options.db.collection(type).insertOne({ ...entry.data, _id: id as any });\n        }\n\n        if (entry.action === \"update\") {\n          await this.options.db.collection(type).updateOne({ _id: id as any }, { $set: entry.data });\n        }\n\n        if (entry.action === \"delete\") {\n          await this.options.db.collection(type).deleteOne({ _id: id as any });\n        }\n      }\n    }\n  };\n\n  applyBatchOperationWithAuthorization = async (operation: EsormBatchOperation, authorization: Authorization<T>) => {\n    console.log(\"Applying Operations...\");\n\n    for (const type in operation.types) {\n      const t = operation.types[type];\n      const permissionsRaw = authorization[type];\n      const permissions = Array.isArray(permissionsRaw) ? permissionsRaw : [permissionsRaw];\n\n      for (const [id, entry] of Object.entries(t)) {\n        if (entry.action === \"create\") {\n          const isAuthorized = authorizeEntityForPermission(\"create\", entry.data, permissions);\n\n          if (isAuthorized) {\n            await this.options.db.collection(type).insertOne({ ...entry.data, _id: id as any });\n          } else {\n            console.log(\"Unauthorized. Skipping Mutation.\");\n          }\n        }\n\n        if (entry.action === \"update\") {\n          const target = await this.options.db.collection(type).findOne({ _id: id as any });\n\n          const isAuthorizedOriginal = authorizeEntityForPermission(\"update\", target, permissions);\n          const isAuthorizedUpdated = authorizeEntityForPermission(\"update\", { ...target, ...entry.data }, permissions);\n\n          if (isAuthorizedOriginal && isAuthorizedUpdated) {\n            await this.options.db.collection(type).updateOne({ _id: id as any }, { $set: entry.data });\n          } else {\n            console.log(\"Unauthorized. Skipping Mutation.\");\n          }\n        }\n\n        if (entry.action === \"delete\") {\n          const target = await this.options.db.collection(type).findOne({ _id: id as any });\n\n          const isAuthorized = authorizeEntityForPermission(\"delete\", target, permissions);\n\n          if (isAuthorized) {\n            await this.options.db.collection(type).deleteOne({ _id: id as any });\n          } else {\n            console.log(\"Unauthorized. Skipping Mutation.\");\n          }\n        }\n      }\n    }\n  };\n}\n\ntype EsormServerApiOptions = {\n  db: Db;\n};\n"],"mappings":"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","names":["req","session"]}